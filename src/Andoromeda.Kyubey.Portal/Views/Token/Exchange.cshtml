@model Token
@{
    ViewBag.Title = Model.Id + " - " + SR["Exchange"];
    ViewBag.Current = "token-exchange";
    Curve curve = ViewBag.Curve;
    TokenManifestJObject tokenInfo = ViewBag.TokenInfo;
    var constJs = "";
    if (curve != null)
    {
        for (var i = 0; i < curve.Arguments.Object.Count(); i++)
        {
            constJs += $"var {curve.Arguments.Object.ElementAt(i).Id} = {tokenInfo.Basic.Curve_Arguments.ElementAt(i)};";
        }
    }
    bool isContractExchange = Context.Request.Query.ContainsKey("contract");
}



<script src="~/js/eos.js"></script>
<script src="~/js/common.js"></script>
<script src="~/js/moment.js"></script>
<script src="~/js/echarts.js"></script>
<script src="~/js/d3.min.js"></script>
<script src="~/js/function-plot.min.js"></script>
<script src="~/js/eval-expr.js"></script>
<script src="~/js/kyubey.js"></script>
<script src="~/js/candlestick/index.js"></script>
@if (tokenInfo.Contract_Exchange)
{
    <script src="/token/@(Model.Id).js"></script>
}
<script src="~/js/vue.js"></script>

<div id="app">
    @await Html.PartialAsync("_TokenHeader")
    <section>
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-3">
                    <div class="card exchange-order-card">
                        <div class="exchange-orders-header">
                            <a class="order-filter-button" title="@SR["Deep"]" v-bind:class="{ 'active': control.order === 'mixed' }" v-on:click="control.order = 'mixed'"><img src="~/img/order-mixed.png" /></a>
                            <a class="order-filter-button" title="@SR["Buy"]" v-bind:class="{ 'active': control.order === 'buy' }" v-on:click="control.order = 'buy'"><img src="~/img/order-buy.png" /></a>
                            <a class="order-filter-button" title="@SR["Sell"]" v-bind:class="{ 'active': control.order === 'sell' }" v-on:click="control.order = 'sell'"><img src="~/img/order-sell.png" /></a>
                        </div>
                        <table class="exchange-orders-table" id="sell-order-table" v-if="control.order !== 'buy'">
                            <thead>
                                <tr>
                                    <th>@SR["Unit Price"] (EOS)</th>
                                    <th>@SR["Amount"] (@Model.Id)</th>
                                    <th>@SR["Total"] (EOS)</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr v-for="x in sellOrders" v-on:click="setPublish(x.unit, x.amount)" :style="'background: linear-gradient(to left, #F8EBF1 ' + getcolorOccupationRatio(x.amount,x.totalMax) + ', white ' + getcolorOccupationRatio(x.amount,x.totalMax) + ')'">
                                    <td>{{ parseFloat(x.unit).toFixed(4) }}</td>
                                    <td>{{ parseFloat(x.amount).toFixed(4) }}</td>
                                    <td>{{ parseFloat(x.total).toFixed(4) }}</td>
                                </tr>
                                <tr v-if="sellOrders.length === 0">
                                    <td colspan="3" style="text-align: center">@SR["No more orders"]</td>
                                </tr>
                            </tbody>
                        </table>
                        <div class="exchange-orders-split">
                            {{ lastMatched }}
                        </div>
                        <table class="exchange-orders-table" id="buy-order-table" v-if="control.order !== 'sell'">
                            <thead v-bind:class="{ 'hidden': control.order !== 'buy' }">
                                <tr>
                                    <th>@SR["Unit Price"] (EOS)</th>
                                    <th>@SR["Amount"] (@Model.Id)</th>
                                    <th>@SR["Total"] (EOS)</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr v-for="x in buyOrders" v-on:click="setPublish(x.unit, x.amount)" :style="'background: linear-gradient(to left, #F3F9EC ' + getcolorOccupationRatio(x.total,x.totalMax) + ', white ' + getcolorOccupationRatio(x.total,x.totalMax) + ')'">
                                    <td>{{ parseFloat(x.unit).toFixed(4) }}</td>
                                    <td>{{ parseFloat(x.amount).toFixed(4) }}</td>
                                    <td>{{ parseFloat(x.total).toFixed(4) }}</td>
                                </tr>
                                <tr v-if="buyOrders.length === 0">
                                    <td colspan="3" style="text-align: center">@SR["No more orders"]</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="card exchange-chart-card">
                        <div class="exchange-chart-menu">
                            <a class="exchange-chart-menu-item" v-bind:class="{ 'active': control.chart === 'k' }" v-on:click="control.chart = 'k'">@SR["Candlestick"]</a>
                            @if (curve != null)
                            {
                                <a class="exchange-chart-menu-item" v-bind:class="{ 'active': control.chart === 'curve' }" v-on:click="control.chart = 'curve'">@SR["Curve"] (@curve.Id)</a>
                            }
                        </div>
                        <div v-show="control.chart === 'k'">
                            <div id="chart" style=" height:350px; width: 100%">
                                @section Style{
                                    <!--封装了一个发布订阅模式-->
                                    <script src="/js/candlestick/event.js"></script>
                                    <!--图表库js-->
                                    <script src="/js/candlestick/charting_library/charting_library.min.js"></script>
                                    <!--websocket-->
                                    <script src="/js/candlestick/websocket.js"></script>
                                    <!--图表数据获取-->
                                    <script src="/js/candlestick/datafeed.js"></script>
                                    <!--图表配置-->
                                    <script src="/js/candlestick/chartConfig.js"></script>
                                    <link href="~/css/kyubey-candlestick.css" rel="stylesheet">
                                }
                                <div class="root">
                                    <!--<div id="market" class="market">
                                      <span class="active">BTC/USDT</span>
                                      <span>ETH/USDT</span>
                                      <span>BCH/USDT</span>
                                      <span>EOS/USDT</span>
                                      <span>ETC/USDT</span>
                                    </div>-->
                                    <div class="chart">
                                        <div class="interval" id="interval">
                                            <span  data-value="1">1min</span>
                                            <span data-value="5">5min</span>
                                            <span data-value="15">15min</span>
                                            <span data-value="30">30min</span>
                                            <span data-value="60">1hour</span>
                                            <span class="active" data-value="240">4hour</span>
                                            <span data-value="360">6hour</span>
                                            <span data-value="1D">1day</span>
                                        </div>
                                        <div id="tv_chart_container"></div>
                                    </div>
                                </div>

                            </div>
                        </div>
                        @if (curve != null)
                        {
                            <div v-show="control.chart === 'curve'" class="row curve-panel">
                                <div class="col-md-3 curve-panel-left">
                                    <ul class="curve-panel-list">
                                        <li v-bind:class="{ 'active': control.curve === 'price-balance' }" v-on:click="control.curve = 'price-balance'"><a>@SR["Price - Balance"]</a></li>
                                        <li v-bind:class="{ 'active': control.curve === 'price-supply' }" v-on:click="control.curve = 'price-supply'"><a>@SR["Price - Supply"]</a></li>
                                        <li v-bind:class="{ 'active': control.curve === 'supply-balance' }" v-on:click="control.curve = 'supply-balance'"><a>@SR["Supply - Balance"]</a></li>
                                        <li v-bind:class="{ 'active': control.curve === 'balance-supply' }" v-on:click="control.curve = 'balance-supply'"><a>@SR["Balance - Supply"]</a></li>
                                    </ul>
                                </div>
                                <div class="col-md-9 curve-panel-right">
                                    @if (!string.IsNullOrEmpty(curve.PriceBalanceFunction))
                                    {
                                        <div id="chartPriceBalance" v-show="control.curve === 'price-balance'"></div>
                                    }
                                    @if (!string.IsNullOrEmpty(curve.PriceSupplyFunction))
                                    {
                                        <div id="chartPriceSupply" v-show="control.curve === 'price-supply'"></div>
                                    }
                                    @if (!string.IsNullOrEmpty(curve.SupplyBalanceFunction))
                                    {
                                        <div id="chartSupplyBalance" v-show="control.curve === 'supply-balance'"></div>
                                    }
                                    @if (!string.IsNullOrEmpty(curve.BalanceSupplyFunction))
                                    {
                                        <div id="chartBalanceSupply" v-show="control.curve === 'balance-supply'"></div>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                    <div class="card exchange-submit-card">
                        <div class="exchange-chart-menu">
                            @if (tokenInfo.Dex)
                            {
                                <a class="exchange-chart-menu-item" v-bind:class="{ 'active': control.publish === 'limit' }" v-on:click="control.publish = 'limit'">@SR["Limit Order"]</a>
                                <a class="exchange-chart-menu-item" v-bind:class="{ 'active': control.publish === 'market' }" v-on:click="control.publish = 'market'">@SR["Market Order"]</a>
                            }
                            @if (tokenInfo.Contract_Exchange)
                            {
                                <a class="exchange-chart-menu-item" v-bind:class="{ 'active': control.publish === 'contract' }" v-on:click="control.publish = 'contract'">@SR["Exchange Via Contract"]</a>
                            }
                        </div>
                        <div class="row exchange-panel">
                            <div class="col-md-6">
                                <div class="exchange-buy-text">
                                    <span>@SR["Buy {0}", Model.Id]</span>
                                    <span v-if="isSignedIn" class="exchange-sell-text-right">Balance: {{ eosBalance.toFixed(4) }} EOS</span>
                                </div>
                                <div class="row exchange-form-input">
                                    <div class="col-sm-4 exchange-label">@SR["Price"]</div>
                                    <div class="col-sm-8" v-if="control.publish === 'limit'">
                                        <input type="text" class="exchange-textbox" v-model="inputs.buyPrice" />
                                        <div class="exchange-textbox-unit">EOS</div>
                                    </div>
                                    <div class="col-sm-8 exchange-text" v-if="control.publish === 'market'">
                                        @SR["Best Matches"]
                                    </div>
                                    <div class="col-sm-8 exchange-text" v-if="control.publish === 'contract'">
                                        {{ contractBuy }}
                                    </div>
                                </div>
                                <div class="row exchange-form-input" v-if="control.publish === 'limit'">
                                    <div class="col-sm-4 exchange-label">@SR["Amount"]</div>
                                    <div class="col-sm-8">
                                        <input type="text" class="exchange-textbox" v-model="inputs.buyAmount" />
                                        <div class="exchange-textbox-unit">@Model.Id</div>
                                    </div>
                                </div>

                                <div class="row" v-if="control.publish === 'limit'">
                                    <div class="col-md-4"></div>
                                    <div class="col-md-8">
                                        <div class="exchange-percentage-outer">
                                            <a class="exchange-percentage" v-on:click="setBuyTotal(0.25)">25%</a>
                                            <a class="exchange-percentage" v-on:click="setBuyTotal(0.5)">50%</a>
                                            <a class="exchange-percentage" v-on:click="setBuyTotal(0.75)">75%</a>
                                            <a class="exchange-percentage" v-on:click="setBuyTotal(1)">100%</a>
                                        </div>
                                    </div>
                                </div>

                                <div class="row exchange-form-input">
                                    <div class="col-sm-4 exchange-label">@SR["Total"]</div>
                                    <div class="col-sm-8">
                                        <input type="text" class="exchange-textbox" v-model="inputs.buyTotal" />
                                        <div class="exchange-textbox-unit">EOS</div>
                                    </div>
                                </div>

                                <div class="row" v-if="control.publish !== 'limit'">
                                    <div class="col-md-4"></div>
                                    <div class="col-md-8">
                                        <div class="exchange-percentage-outer">
                                            <a class="exchange-percentage" v-on:click="setBuyTotal(0.25)">25%</a>
                                            <a class="exchange-percentage" v-on:click="setBuyTotal(0.5)">50%</a>
                                            <a class="exchange-percentage" v-on:click="setBuyTotal(0.75)">75%</a>
                                            <a class="exchange-percentage" v-on:click="setBuyTotal(1)">100%</a>
                                        </div>
                                    </div>
                                </div>

                                <div>
                                    <input v-if="isSignedIn" type="button" class="btn btn-primary btn-full-width exchange-button" value="@SR["Buy {0}", Model.Id]" v-on:click="buy()" />
                                    <input v-else type="button" class="btn btn-primary btn-full-width exchange-button" value="@SR["Login with Scatter"]" v-on:click="login()" />
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="exchange-sell-text">
                                    <span>@SR["Sell {0}", Model.Id]</span>
                                    <span v-if="isSignedIn" class="exchange-sell-text-right">Balance: {{ tokenBalance.toFixed(4) }} @Model.Id</span>
                                </div>
                                <div class="row exchange-form-input">
                                    <div class="col-sm-4 exchange-label">@SR["Price"]</div>
                                    <div class="col-sm-8" v-if="control.publish === 'limit'">
                                        <input type="text" class="exchange-textbox" v-model="inputs.sellPrice" />
                                        <div class="exchange-textbox-unit">EOS</div>
                                    </div>
                                    <div class="col-sm-8 exchange-text" v-if="control.publish === 'market'">
                                        @SR["Best Matches"]
                                    </div>
                                    <div class="col-sm-8 exchange-text" v-if="control.publish === 'contract'">
                                        {{ contractSell }}
                                    </div>
                                </div>
                                <div class="row exchange-form-input">
                                    <div class="col-sm-4 exchange-label">@SR["Amount"]</div>
                                    <div class="col-sm-8">
                                        <input type="text" class="exchange-textbox" v-model="inputs.sellAmount" />
                                        <div class="exchange-textbox-unit">@Model.Id</div>
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-md-4"></div>
                                    <div class="col-md-8">
                                        <div class="exchange-percentage-outer">
                                            <a class="exchange-percentage" v-on:click="setSellTotal(0.25)">25%</a>
                                            <a class="exchange-percentage" v-on:click="setSellTotal(0.5)">50%</a>
                                            <a class="exchange-percentage" v-on:click="setSellTotal(0.75)">75%</a>
                                            <a class="exchange-percentage" v-on:click="setSellTotal(1)">100%</a>
                                        </div>
                                    </div>
                                </div>

                                <div class="row exchange-form-input" v-if="control.publish === 'limit'">
                                    <div class="col-sm-4 exchange-label">@SR["Total"]</div>
                                    <div class="col-sm-8">
                                        <input type="text" class="exchange-textbox" v-model="inputs.sellTotal" />
                                        <div class="exchange-textbox-unit">EOS</div>
                                    </div>
                                </div>
                                <div>
                                    <input v-if="isSignedIn" type="button" class="btn btn-primary btn-full-width exchange-button" value="@SR["Sell {0}", Model.Id]" v-on:click="sell()" />
                                    <input v-else type="button" class="btn btn-primary btn-full-width exchange-button" value="@SR["Login with Scatter"]" v-on:click="login()" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card exchange-pair-card">
                        <div class="exchange-pair-menu">
                            <div class="row">
                                <div class="col-lg-7">
                                    <a class="exchange-pair-menu-item" v-bind:class="{ 'active': control.pair === 'all' }" v-on:click="control.pair = 'all'"><i class="fa fa-list"></i> @SR["All"]</a>
                                    <a v-if="isSignedIn" v-bind:class="{ 'active': control.pair === 'fav' }" v-on:click="control.pair = 'fav'" class="exchange-pair-menu-item"><i class="fa fa-star"></i> @SR["Favorites"]</a>
                                </div>
                                <div class="col-lg-5">
                                    <input type="text" class="exchange-search-textbox" placeholder="@SR["Search"]" v-model="inputs.pair" />
                                </div>
                            </div>
                        </div>
                        <div class="exchange-pair-table-outer">
                            <table class="exchange-pair-table">
                                <thead>
                                    <tr>
                                        <th>@SR["Token"]</th>
                                        <th class="text-right">@SR["Last Price"]</th>
                                        <th class="text-right">@SR["Change"]</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr v-for="x in (control.pair === 'all' ? pairs : pairs.filter(y => fav.indexOf(y.id) >= 0))">
                                        <td><a v-on:click="toggleFav(x.id)"><i v-if="isSignedIn" class="fa" v-bind:class="{ 'fa-star-o': !fav.filter(y => y == x.id).length, 'fa-star': fav.filter(y => y == x.id).length }"></i></a> <a v-on:click="redirectToToken(x.id)" class="exchange-pair-id">{{ x.id }}</a></td>
                                        <td class="text-right">{{ parseFloat(x.price).toFixed(4) }}</td>
                                        <td class="text-right" v-bind:class="{ 'green': x.change >= 0, 'red': x.change < 0 }">{{ parseFloat(x.change * 100.0) >= 0 ? '+' : '' }}{{ parseFloat(x.change * 100.0).toFixed(2) }}%</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <div class="card exchange-transaction-card">
                        <div class="exchange-transaction-menu">
                            @SR["Recent Transactions"]
                        </div>
                        <div class="exchange-transaction-table-outer">
                            <table class="exchange-transaction-table">
                                <thead>
                                    <tr>
                                        <th>@SR["Price"] (EOS)</th>
                                        <th>@SR["Amount"] (@Model.Id)</th>
                                        <th>@SR["Time"]</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr v-for="x in recentTransactions">
                                        <td>{{ parseFloat(x.price).toFixed(4) }}</td>
                                        <td>{{ parseFloat(x.amount).toFixed(4) }}</td>
                                        <td>{{ moment(x.time + 'Z').format('MM-DD HH:mm:ss') }}</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row" v-if="isSignedIn">
                <div class="col-md-12">
                    <div class="card">
                        <div class="exchange-chart-menu">
                            <a class="exchange-chart-menu-item" v-bind:class="{ 'active': control.my === 'current' }" v-on:click="control.my = 'current'">@SR["Opening Orders"]</a>
                            <a class="exchange-chart-menu-item" v-bind:class="{ 'active': control.my === 'history' }" v-on:click="control.my = 'history'">@SR["History Orders"]</a>
                        </div>
                        <table class="exchange-order-state-table" v-if="control.my === 'current'">
                            <thead>
                                <tr>
                                    <th>@SR["Token"]</th>
                                    <th>@SR["Type"]</th>
                                    <th class="text-right">@SR["Unit price"]</th>
                                    <th class="text-right">@SR["Amount"]</th>
                                    <th class="text-right">@SR["Total"]</th>
                                    <th>@SR["Published at"]</th>
                                    <th>@SR["Action"]</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr v-for="x in currentOrders">
                                    <td>{{ x.token }}</td>
                                    <td>{{ x.type }}</td>
                                    <td class="text-right">{{ parseFloat(x.price).toFixed(4) || '@SR["Loading..."]' }} </td>
                                    <td class="text-right">{{ parseFloat(x.amount).toFixed(4) || '@SR["Loading..."]' }}</td>
                                    <td class="text-right">{{ parseFloat(x.total).toFixed(4) || '@SR["Loading..."]' }}</td>
                                    <td>{{ moment(x.time + 'Z').format('MM-DD HH:mm:ss') }}</td>
                                    <td>
                                        <a class="btn-cancel" v-on:click="cancel(x.token, x.type, x.id)">@SR["Cancel"]</a>
                                    </td>
                                </tr>
                                <tr v-if="currentOrders.length === 0">
                                    <td colspan="7">@SR["No more data"]</td>
                                </tr>
                            </tbody>
                        </table>
                        <table class="exchange-order-state-table" v-if="control.my === 'history'">
                            <thead>
                                <tr>
                                    <th>@SR["Token"]</th>
                                    <th>@SR["Bidder"]</th>
                                    <th>@SR["Asker"]</th>
                                    <th>@SR["Matched at"]</th>
                                    <th>@SR["Unit price"]</th>
                                    <th>@SR["Amount"]</th>
                                    <th>@SR["Total"]</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr v-for="x in historyOrders">
                                    <td>{{ x.tokenId }}</td>
                                    <td>{{ x.bidder }}</td>
                                    <td>{{ x.asker }}</td>
                                    <td>{{ moment(x.time + 'Z').format('MM-DD HH:mm:ss') }}</td>
                                    <td>{{ x.unitPrice }} EOS</td>
                                    <td>{{ parseFloat(x.ask).toFixed(4) }} {{ x.tokenId }}</td>
                                    <td>{{ parseFloat(x.bid).toFixed(4) }} EOS</td>
                                </tr>
                                <tr v-if="historyOrders.length === 0">
                                    <td colspan="7">@SR["No more data"]</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <div class="modal fade" id="modal" tabindex="-1" role="dialog" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalTitle"></h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body" id="modalContent"></div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>


    <div class="modal fade" id="modalTake" tabindex="-1" role="dialog" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@SR["Transaction"]</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-2">
                            @SR["Outgoing"]
                        </div>
                        <div class="col-md-4">
                            <input id="slider1" data-slider-id="slider1" type="text" />
                        </div>
                        <div class="col-md-4">
                            <input class="form-control" id="value1" />
                        </div>
                        <div class="col-md-2" id="symbol1">
                        </div>
                    </div>
                    <div class="row" style="margin-top: 30px">
                        <div class="col-md-2">
                            @SR["Incoming"]
                        </div>
                        <div class="col-md-4">
                            <input id="slider2" data-slider-id="slider2" type="text" />
                        </div>
                        <div class="col-md-4">
                            <input class="form-control" id="value2" />
                        </div>
                        <div class="col-md-2" id="symbol2">
                        </div>
                    </div>
                    <div class="row" style="margin-top: 30px">
                        <div class="col-md-4" style="text-align: center">
                            @SR["Unit Price"]
                        </div>
                        <div class="col-md-2">
                            ≈
                        </div>
                        <div class="col-md-4" id="unit">
                        </div>
                        <div class="col-md-2">
                            EOS
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" data-dismiss="modal" onclick="take2()">@SR["Take"]</button>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    var app = new Vue({
        el: '#app',
        data: {
             tokenId:'@Model.Id',
            control: {
                order: 'mixed',
                my: 'current',
                publish: '@((!tokenInfo.Dex|| isContractExchange) ? "contract" : "limit")',
                chart: '@(curve != null && isContractExchange ? "curve": "k")',
                curve: 'price-balance',
                pair: 'all'
            },
            inputs: {
                pair: null,
                buyPrice: 0,
                sellPrice: 0,
                buyAmount: 0,
                sellAmount: 0,
                buyTotal: 0,
                sellTotal: 0,
                vaildbuyPriceInput: 0,
                vaildbuyAmountInput: 0,
                vaildbuyTotalInput: 0,
                vaildsellPriceInput: 0,
                vaildsellAmountInput: 0,
                vaildsellTotalInput: 0
            },
            buyOrders: [],
            sellOrders: [],
            lastMatched: '0.0000',
            recentTransactions: [],
            currentOrders: [],
            historyOrders: [],
            pairs: [],
            contractBuy: null,
            contractSell: null,
            fav: [],
            eosBalance: 0.0000,
            tokenBalance: 0.0000,
            isSignedIn: false
        },
        watch: {
            'inputs.pair': function () {
                this.getPairs();
            },
            'inputs.buyPrice': function (val) {
                if (!this.isValidInput(val)) {
                    this.inputs.buyPrice = this.inputs.vaildbuyPriceInput;
                    val = this.inputs.vaildbuyPriceInput;
                }
                this.inputs.vaildbuyPriceInput = val;
                this.inputs.buyTotal = val * this.inputs.buyAmount;
            },
            'inputs.buyAmount': function (val) {
                if (!this.isValidInput(val)) {
                    this.inputs.buyAmount = this.inputs.vaildbuyAmountInput;
                    val = this.inputs.vaildbuyAmountInput;
                }
                this.inputs.vaildbuyAmountInput = val;
                this.inputs.buyTotal = val * this.inputs.buyPrice;
            },
            'inputs.buyTotal': function (val) {
                if (isNaN(val)) {
                    return;
                }
                if (this.control.publish === 'limit') {
                    this.inputs.buyPrice = val / (this.inputs.buyAmount || 1);
                }
            },
            'inputs.sellPrice': function (val) {
                if (!this.isValidInput(val)) {
                    this.inputs.sellPrice = this.inputs.vaildsellPriceInput;
                    val = this.inputs.vaildsellPriceInput;
                }
                this.inputs.vaildsellPriceInput = val;
                this.inputs.sellTotal = val * this.inputs.sellAmount;
            },
            'inputs.sellAmount': function (val) {
                if (!this.isValidInput(val)) {
                    this.inputs.sellAmount = this.inputs.vaildsellAmountInput;
                    val = this.inputs.vaildsellAmountInput;
                }
                this.inputs.vaildsellAmountInput = val;
                this.inputs.sellTotal = val * this.inputs.sellPrice;
            },
            'inputs.sellTotal': function (val) {
                if (isNaN(val)) {
                    return;
                }
                if (this.control.publish === 'limit') {
                    this.inputs.sellPrice = val / (this.inputs.sellAmount || 1);
                }
            },
            deep: true
        },
        created: function () {
            var self = this;
            this.init();
            setInterval(this.init, 1000 * 5);
            setInterval(function () {
                if (account && account.name) {
                    self.isSignedIn = true;
                } else {
                    self.isSignedIn = false;
                }
            }, 5000);

        },
        mounted: function () {
            kyubeyExchangeCandlestick.init(this.tokenId, this.getCandlestickData);
        },
        methods: {
            getCandlestickData: function (tokenId, startDate, endDate, perioid, callback) {
                var _this = this;
                var start = _this.dateObjToString(startDate);
                var end = _this.dateObjToString(endDate);
                $.ajax({
                    type: "GET",
                    url: `/Token/${tokenId}/candlestick?begin=${start}&end=${end}&period=${perioid}`,
                    contentType: "application/json; charset=utf-8",
                    success: function (data, status) {
                        callback(data);
                    },
                    dataType: "json"
                });
            },
            dateObjToString: function (date) {
                return `${date.getFullYear()}/${(date.getMonth() + 1)}/${date.getDate()} ${date.getHours()}:${date.getMinutes()}:${date.getSeconds()} `;
            },
            toggleFav: function (id) {
                var self = this;
                $.post(`/token/${account.name}/favorite/${id}`, {}, function (data) {
                    self.getFavorites();
                });
            },
            getFavorites: function () {
                var self = this;
                $.getJSON(`/token/${account.name}/favorite`, {}, function (data) {
                    self.fav = data;
                });
            },
            switchAccount: function () {
                var self = this;
                scatter.forgetIdentity()
                    .then(() => {
                        self.isSignedIn = false;
                        self.login();
                    })
                    .catch(() => {
                        self.isSignedIn = false;
                        self.fav = [];
                    });
            },
            getAccountName: function () {
                if (this.isSignedIn) {
                    return account.name;
                } else {
                    return '@(new HtmlString(SR["Login with Scatter"]))';
                }
            },
            login: function () {
                if (!('scatter' in window)) {
                    showModal('Scatter插件没有找到', 'Scatter是一款EOS钱包，运行在Chrome浏览器中，请您确定已经安装Scatter插件. 参考：https://www.jianshu.com/p/a2e1e6204023');
                } else {
                    var self = this;

                    var network = {
                        blockchain: 'eos',
                        host: host,
                        port: 443,
                        protocol: 'https',
                        chainId: chain_id
                    };

                    scatter.getIdentity({ accounts: [network] }).then(identity => {
                        account = identity.accounts.find(acc => acc.blockchain === 'eos');
                        eos = scatter.eos(network, Eos, {});
                        requiredFields = { accounts: [network] };
                        self.isSignedIn = true;
                        self.init();
                        self.getFavorites();
                    });
                }
            },
            init: function () {
                this.getOrders();
                this.getRecentTransaction();
                this.getCurrentOrders();
                this.getHistoryOrders();
                this.getContractPrices();
                this.getPairs();
                this.getBalances();
            },
            moment: function (time) {
                return moment(time);
            },
            getOrders: function () {
                var self = this;
                $.getJSON('/token/@Model.Id/buy-data', {}, function (data) {
                    self.buyOrders = data;
                });
                $.getJSON('/token/@Model.Id/sell-data', {}, function (data) {
                    self.sellOrders = data;
                });
                $.get('/token/@Model.Id/last-match', {}, function (data) {
                    self.lastMatched = parseFloat(data).toFixed(4);
                });
            },
            getRecentTransaction: function () {
                var self = this;
                $.getJSON('/token/@Model.Id/recent-transaction', {}, function (data) {
                    self.recentTransactions = data;
                });
            },
            getCurrentOrders: function () {
                if (account && account.name) {
                    var self = this;
                    $.getJSON(`/token/${account.name}/current-order`, {}, function (data) {
                        self.currentOrders = data;
                    });
                }
            },
            getHistoryOrders: function () {
                var self = this;
                if (account && account.name) {
                    $.getJSON(`/token/${account.name}/history-order`, {}, function (data) {
                        self.historyOrders = data;
                    });
                }
            },
            getContractPrices: function () {
                var self = this;
                $.getJSON(`/token/@Model.Id/contract-price`, {}, function (data) {
                    self.contractBuy = data.buyPrice;
                    self.contractSell = data.sellPrice;
                });
            },
            getPairs: function () {
                var self = this;
                $.getJSON('/token/pair', { token: self.inputs.pair }, function (data) {
                    self.pairs = data;
                });
            },
            getBalances: function () {
                if (account && account.name) {
                    this.getBalance(account.name, 'EOS');
                    this.getBalance(account.name, '@Model.Id');
                }
            },
            getBalance: function (account_name, token) {
                var self = this;
                $.get(`/token/${account_name}/balance/${token}`, {}, function (data) {
                    if (token === 'EOS') {
                        self.eosBalance = parseFloat(data);
                    } else {
                        self.tokenBalance = parseFloat(data);
                    }
                });
            },
            redirectToToken: function (id) {
                window.location = `/token/${id}/exchange`;
            },
            setPublish: function (price, amount) {
                this.inputs.buyPrice = price;
                this.inputs.buyAmount = amount;
                this.inputs.sellPrice = price;
                this.inputs.sellAmount = amount;
            },
            setBuyTotal: function (rate) {
                this.inputs.buyTotal = this.eosBalance * parseFloat(rate);
            },
            setSellTotal: function (rate) {
                this.inputs.sellAmount = this.tokenBalance * parseFloat(rate);
            },
            buy: function () {
                var self = this;
                if (!account || !account.name) {
                    showModal('@(new HtmlString(SR["Error"]))', '@(new HtmlString(SR["Please login scatter before publish order."]))');
                    return;
                }
                if (this.control.publish === 'limit') {
                    var price = parseFloat(parseFloat(this.inputs.buyPrice).toFixed(4));
                    var ask = parseFloat(parseFloat(this.inputs.buyAmount).toFixed(4));
                    var bid = parseFloat(ask * price);
                    eos.contract('eosio.token', { requiredFields })
                        .then(contract => {
                            return contract.transfer(
                                account.name,
                                '@ViewBag.OtcContract',
                                bid.toFixed(4) + ' EOS',
                                ask.toFixed(4) + ' @Model.Id',
                                {
                                    authorization: [`${account.name}@@${account.authority}`]
                                });
                        })
                        .then(() => {
                            self.getCurrentOrders();
                            self.getOrders();
                            self.getBalances();
                            showModal('@(new HtmlString(SR["Transaction Succeeded"]))', '@(new HtmlString(SR["You can confirm the result in your wallet"])), @(new HtmlString(SR["Please contact us if you have any questions"]))');
                        })
                        .catch(error => {
                            showModal('@(new HtmlString(SR["Transaction Failed"]))', error.message + '@(new HtmlString(SR["Please contact us if you have any questions"]))');
                        });
                }
                else if (this.control.publish === 'market') {
                    eos.contract('eosio.token', { requiredFields })
                        .then(contract => {
                            return contract.transfer(
                                account.name,
                                '@ViewBag.OtcContract',
                                parseFloat(this.inputs.buyTotal).toFixed(4) + ' EOS',
                                'market',
                                {
                                    authorization: [`${account.name}@@${account.authority}`]
                                });
                        })
                        .then(() => {
                            self.getCurrentOrders();
                            self.getOrders();
                            self.getBalances();
                            showModal('@(new HtmlString(SR["Transaction Succeeded"]))', '@(new HtmlString(SR["You can confirm the result in your wallet"])), @(new HtmlString(SR["Please contact us if you have any questions"]))');
                        })
                        .catch(error => {
                            showModal('@(new HtmlString(SR["Transaction Failed"]))', error.message + '@(new HtmlString(SR["Please contact us if you have any questions"]))');
                        });
                }
                else if (this.control.publish === 'contract') {
                    buy(parseFloat(this.inputs.buyTotal));
                }
            },
            sell: function () {
                var self = this;
                if (!account || !account.name) {
                    showModal('@(new HtmlString(SR["Error"]))', '@(new HtmlString(SR["Please login scatter before publish order."]))');
                    return;
                }
                if (this.control.publish === 'limit') {
                    var price = parseFloat(parseFloat(this.inputs.sellPrice).toFixed(4));
                    var bid = parseFloat(parseFloat(this.inputs.sellAmount).toFixed(4));
                    var ask = parseFloat(bid * price);
                    eos.contract('@tokenInfo.Basic.Contract.Transfer', { requiredFields })
                        .then(contract => {
                            return contract.transfer(
                                account.name,
                                '@ViewBag.OtcContract',
                                bid.toFixed(4) + ' @Model.Id',
                                ask.toFixed(4) + ' EOS',
                                {
                                    authorization: [`${account.name}@@${account.authority}`]
                                });
                        })
                        .then(() => {
                            self.getCurrentOrders();
                            self.getOrders();
                            self.getBalances();
                            showModal('@(new HtmlString(SR["Transaction Succeeded"]))', '@(new HtmlString(SR["You can confirm the result in your wallet"])), @(new HtmlString(SR["Please contact us if you have any questions"]))');
                        })
                        .catch(error => {
                            showModal('@(new HtmlString(SR["Transaction Failed"]))', error.message + '@(new HtmlString(SR["Please contact us if you have any questions"]))');
                        });
                }
                else if (this.control.publish === 'market') {
                    eos.contract('@tokenInfo.Basic.Contract.Transfer', { requiredFields })
                        .then(contract => {
                            return contract.transfer(
                                account.name,
                                '@ViewBag.OtcContract',
                                parseFloat(this.inputs.sellAmount).toFixed(4) + ' @Model.Id',
                                'market',
                                {
                                    authorization: [`${account.name}@@${account.authority}`]
                                });
                        })
                        .then(() => {
                            self.getCurrentOrders();
                            self.getOrders();
                            self.getBalances();
                            showModal('@(new HtmlString(SR["Transaction Succeeded"]))', '@(new HtmlString(SR["You can confirm the result in your wallet"])), @(new HtmlString(SR["Please contact us if you have any questions"]))');
                        })
                        .catch(error => {
                            showModal('@(new HtmlString(SR["Transaction Failed"]))', error.message + '@(new HtmlString(SR["Please contact us if you have any questions"]))');
                        });
                }
                else if (this.control.publish === 'contract') {
                    sell(parseFloat(this.inputs.sellAmount));
                }
            },
            cancel: function (token, type, id) {
                var self = this;
                eos.contract('@ViewBag.OtcContract', { requiredFields })
                    .then(contract => {
                        if (type === 'Buy') {
                            return contract.cancelbuy(
                                account.name,
                                token,
                                id,
                                {
                                    authorization: [`${account.name}@@${account.authority}`]
                                });
                        } else {
                            return contract.cancelsell(
                                account.name,
                                token,
                                id,
                                {
                                    authorization: [`${account.name}@@${account.authority}`]
                                });
                        }
                    })
                    .then(() => {
                        self.getCurrentOrders();
                        self.getOrders();
                        showModal('@(new HtmlString(SR["Transaction Succeeded"]))', '@(new HtmlString(SR["You can confirm the result in your wallet"])), @(new HtmlString(SR["Please contact us if you have any questions"]))');
                    })
                    .catch(error => {
                        showModal('@(new HtmlString(SR["Transaction Failed"]))', error.message + '@(new HtmlString(SR["Please contact us if you have any questions"]))');
                    });
            },
            getcolorOccupationRatio: function (nowTotalPrice, historyTotalPrice) {
                var now = parseFloat(nowTotalPrice);
                var history = parseFloat(historyTotalPrice);
                if (now > history) return "100%";
                return parseInt(now * 100.0 / history) + "%";
            },
            isValidInput: function (value) {
                if (! /^\d*(?:\.\d{0,4})?$/.test(value)) {
                    return false;
                }
                return true;
            }
        }
    });
</script>

<script>
    function splitData(rawData) {
        var categoryData = [];
        var values = [];

        for (var i = 0; i < rawData.length; i++) {
            categoryData.push(rawData[i].splice(0, 1)[0]);
            values.push(rawData[i]);
        }
        return {
            categoryData: categoryData,
            values: values
        };
    }
</script>
@if (curve != null)
{
    <script>
    @(new HtmlString(constJs))
    eval('@(new HtmlString(!string.IsNullOrEmpty(curve.PriceBalanceFunction) ? $"var funcPriceBalance = `{curve.PriceBalanceFunction}`" : ""))');
    eval('@(new HtmlString(!string.IsNullOrEmpty(curve.PriceSupplyFunction) ? $"var funcPriceSupply = `{curve.PriceSupplyFunction}`" : ""))');
    eval('@(new HtmlString(!string.IsNullOrEmpty(curve.SupplyBalanceFunction) ? $"var funcSupplyBalance = `{curve.SupplyBalanceFunction}`" : ""))');
    eval('@(new HtmlString(!string.IsNullOrEmpty(curve.BalanceSupplyFunction) ? $"var funcBalanceSupply = `{curve.BalanceSupplyFunction}`" : ""))');
    if ($('#chartPriceBalance').length > 0) {
        var _funcPriceBalance = (new MathExpression(funcPriceBalance)).toFunction();
        functionPlot({
            target: document.querySelector("#chartPriceBalance"),
            xAxis: { domain: [0, 1] },
            yAxis: { domain: [0, _funcPriceBalance(1)] },
            tip: {
                renderer: function () { }
            },
            grid: true,
            data: [
                {
                    fn: funcPriceBalance
                }
            ]
        });
    }

    if ($('#chartPriceSupply').length > 0) {
        var _funcPriceSupply = (new MathExpression(funcPriceSupply)).toFunction();
        functionPlot({
            target: document.querySelector("#chartPriceSupply"),
            xAxis: { domain: [0, 1] },
            yAxis: { domain: [0, _funcPriceSupply(1)] },
            tip: {
                renderer: function () { }
            },
            grid: true,
            data: [
                {
                    fn: funcPriceSupply
                }
            ]
        });
    }

    if ($('#chartSupplyBalance').length > 0) {
        var _funcSupplyBalance = (new MathExpression(funcSupplyBalance)).toFunction();
        functionPlot({
            target: document.querySelector("#chartSupplyBalance"),
            xAxis: { domain: [0, 10000] },
            yAxis: { domain: [0, _funcSupplyBalance(10000)] },
            tip: {
                renderer: function () { }
            },
            grid: true,
            data: [
                {
                    fn: funcSupplyBalance
                }
            ]
        });
    }

    if ($('#chartBalanceSupply').length > 0) {
        var _funcBalanceSupply = (new MathExpression(funcBalanceSupply)).toFunction();
        functionPlot({
            target: document.querySelector("#chartBalanceSupply"),
            xAxis: { domain: [0, 10000000] },
            yAxis: { domain: [0, _funcBalanceSupply(10000000)] },
            tip: {
                renderer: function () { }
            },
            grid: true,
            data: [
                {
                    fn: funcBalanceSupply
                }
            ]
        });
    }
    </script>
}