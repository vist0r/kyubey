@{
    TokenHandlerViewModel Model = ViewBag.HandlerView;
    Token token = ViewBag.Token;
    ViewBag.Current = "token-about";
    ViewBag.Theme = "dark";
    ViewBag.Title = token.Id;
}

<script src="~/js/vue.js"></script>

<section id="app" class="token-incubation-container">
    <div class="container">
        <div class="col-md-12">
            <div class="row">
                <div class="token-incubation-inner">
                    <div class="row">
                        <div class="col-md-7">
                            <div class="token-incubation-image" v-bind:style="'background: url(' + current + ')'"></div>
                            <div class="token-incubation-image-circle-outer">
                                <div v-for="x in images" class="token-incubation-image-circle" v-bind:class="{ active: current === x }" v-on:click="current = x"></div>
                            </div>
                        </div>

                        <div class="col-md-5">
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="token-incubation-raised">@($"{Model.HandlerInfo.CurrentRaised.ToString("N")} EOS {SR["Raised"]}")</div>
                                    <div class="progress" style="background-color:darkgray;height:30px;">
                                        @{
                                            int raisedPercent = (Model.HandlerInfo.CurrentRaised == 0 || Model.HandlerInfo.TargetCredits == 0) ? 0 : (int)(100 * Model.HandlerInfo.CurrentRaised / Model.HandlerInfo.TargetCredits);
                                        }
                                        <div class="progress-bar bg-success" role="progressbar" style="width: @(raisedPercent)%" aria-valuenow="@(raisedPercent)" aria-valuemin="0" aria-valuemax="100">@(raisedPercent)%</div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="token-incubation-card">
                                        <div class="token-incubation-card-icon"><i class="fa fa-clock-o"></i></div>
                                        <div class="token-incubation-card-text">@SR["Remaining Time"]</div>
                                        <div class="token-incubation-card-value">@SR["{0} Day(s)", Model.HandlerInfo.RemainingDay]</div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="token-incubation-card">
                                        <div class="token-incubation-card-icon"><i class="fa fa-btc"></i></div>
                                        <div class="token-incubation-card-text">@SR["Remaining Amount"]</div>
                                        <div class="token-incubation-card-value">@($"{ Math.Max((Model.HandlerInfo.TargetCredits - Model.HandlerInfo.CurrentRaised),0).ToString("N")}") EOS</div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="token-incubation-card">
                                        <div class="token-incubation-card-icon"><i class="fa fa-thumbs-o-up"></i></div>
                                        <div class="token-incubation-card-text">@SR["Supporters"]</div>
                                        <div class="token-incubation-card-value">@SR["{0} User(s)", Model.HandlerInfo.CurrentRaisedCount]</div>
                                    </div>
                                </div>
                                <div class="col-md-12">
                                    <a href="/Token/@token.Id/exchange" class="btn btn-incubation-exchange col-md-12">@SR["Exchange"]</a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
@await Html.PartialAsync("_TokenInfoBox")
<section>
    <div class="container">
        <div class="row ">

            <div class="col-md-12">

                <ul class="nav nav-tabs" role="tablist">
                    <li class="nav-item"><a class="nav-link active show" href="#tab-1" data-toggle="tab" role="tab" aria-selected="true">@SR["Detail"]</a></li>
                    <li class="nav-item"><a class="nav-link" href="#tab-2" data-toggle="tab" role="tab" aria-selected="false">@SR["Recent updates"]</a></li>
                    @*<li class="nav-item"><a class="nav-link" href="#tab-3" data-toggle="tab" role="tab" aria-selected="false">@SR["Comments"]</a></li>*@
                </ul>


                <div class="tab-content">
                    <div class="tab-pane active show" id="tab-1" role="tabpanel">
                        @Html.Marked(Model.HandlerInfo.Detail)
                    </div>
                    <div class="tab-pane" id="tab-2" role="tabpanel">
                        @if (Model.RecentUpdate != null)
                        {
                            @foreach (var up in Model.RecentUpdate)
                            {
                                <h4>@up.Title</h4>
                                <p>@up.Time.ToLocalTime().ToString("yyyy-MM-dd HH:mm:ss")</p>
                                <p>@Html.Marked(up.Content)</p>
                            }
                        }
                    </div>
                    <div class="tab-pane" id="tab-3" role="tabpanel">
                        @if (Model.Comments != null)
                        {
                            foreach (var c in Model.Comments)
                            {
                                <p>
                                    <span>@($"{c.UserName}:{c.Content}")</span>
                                    <a href="#">@SR["reply"]</a>
                                </p>

                                if (c.ChildComments != null)
                                {
                                    foreach (var cc in c.ChildComments)
                                    {
                                        <p style=" margin-left:30px;"><span> @($"{cc.UserName} {@SR["to"]} {cc.ReplyUserName}:{cc.Content}")</span><a href="#">@SR["reply"]</a></p>
                                    }
                                }
                            }
                        }

                    </div>
                </div>
            </div>
        </div>

    </div>
</section>

<script>
    var app = new Vue({
        el: '#app',
        data: {
            images: @(new HtmlString(Newtonsoft.Json.JsonConvert.SerializeObject(Model.IncubatorBannerUrls))),
            current: null
        },
        watch: {
        },
        created: function () {
            var self = this;
            self.current = self.images[0];
            setInterval(function () {
                var index = self.images.indexOf(self.current);
                ++index;
                if (index >= self.images.length) {
                    index = 0;
                }
                self.current = self.images[index];
            }, 15000);
        },
        methods: {
        }
    });
</script>
